name: AVA Installer
on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/install.yml'

jobs:
  install:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Write AVA files (config, main workflow, dashboard stub)
        run: |
          mkdir -p .github/workflows state

          # === ava.config.json (edit these later with your real numbers) ===
          cat > ava.config.json <<'JSON'
{
  "user": { "languages": ["es","en"], "weekly_time_hrs": 20 },

  "finops": {
    "monthly_expenses_usd": 0,
    "debt_total_usd": 59176,
    "apr_pct": 0,
    "debt_months": 36,
    "buffer_daily_usd": 5
  },

  "north_star": {
    "daily_cash_target_formula": "(monthly_expenses/30)+(debt_service/30)+buffer",
    "rebalance_cadence_hours": 24
  },

  "policies": {
    "zero_spend": true,
    "first_dollar_priority": true,
    "min_parallel_tracks": 2,
    "posting_windows_et": [["12:00","14:00"],["19:00","21:00"]],
    "kill_switches": ["briefs_no_inquiry_48h","reddit_no_clicks_72h","thumbnail_decay"]
  },

  "portfolio": {
    "fast_cash": ["brief_flip"],
    "compounding": ["yt_jobs_shorts","medium_linkedin_jobpacks"]
  },

  "advisors": [
    {"id":"gpt5_planner","weight":0.45,"role":"Planner"},
    {"id":"deepseek_redteam","weight":0.30,"role":"Critic"},
    {"id":"gemini_trends","weight":0.25,"role":"TrendScout"}
  ],
  "quorum": {"min_advisors": 2, "min_weight": 0.6},

  "bandits": {
    "hooks": "thompson",
    "thumb_title": "ucb1",
    "post_window": "epsilon",
    "epsilon": 0.2
  },

  "approvals": {
    "mode": "auto_if_consensus",
    "consensus_threshold": 0.70,
    "notify": "issues"
  }
}
JSON

          # === Main runner workflow (scheduled + manual runs) ===
          cat > .github/workflows/ava.yml <<'YML'
name: AVA: Launch & Operate
on:
  schedule:
    - cron: "0 */6 * * *"      # closed-loop every 6h (UTC)
    - cron: "50 16 * * *"      # 12:50 ET posting window (UTC-4 during DST)
    - cron: "50 23 * * *"      # 19:50 ET posting window
  workflow_dispatch:

jobs:
  operate:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Ensure state dir
        run: mkdir -p state

      - name: Deliberate (Council stub)
        run: |
          python3 - << 'PY'
import json, time, pathlib
pathlib.Path("state").mkdir(exist_ok=True)
proposals = {
  "ts": time.time(),
  "proposals": [
    {"track_id":"yt_jobs_shorts","advisor_id":"gpt5_planner","recommendation":"scale"},
    {"track_id":"brief_flip","advisor_id":"deepseek_redteam","recommendation":"continue"},
    {"track_id":"medium_linkedin_jobpacks","advisor_id":"gemini_trends","recommendation":"continue"}
  ]
}
open("state/proposals.json","w").write(json.dumps(proposals,indent=2))
PY

      - name: Consensus + Decision (stub)
        run: |
          python3 - << 'PY'
import json, time
consensus = {
  "ts": time.time(),
  "ranking": [
    {"track_id":"yt_jobs_shorts","decision":"scale"},
    {"track_id":"brief_flip","decision":"continue"},
    {"track_id":"medium_linkedin_jobpacks","decision":"continue"}
  ],
  "guardrails": {
    "posting_windows_et":[["12:00","14:00"],["19:00","21:00"]],
    "kill_switches":["briefs_no_inquiry_48h","reddit_no_clicks_72h","thumbnail_decay"]
  }
}
open("state/consensus.json","w").write(json.dumps(consensus,indent=2))
PY

      - name: Operate (Planner/Distributor stubs)
        run: |
          python3 - << 'PY'
import json, time, math, pathlib
cfg = json.loads(open("ava.config.json").read())
P = float(cfg["finops"]["debt_total_usd"])
r = float(cfg["finops"]["apr_pct"])/100.0/12.0
n = max(1, int(cfg["finops"]["debt_months"]))
pay = (P/n) if r==0 else (P*r*(1+r)**n)/(((1+r)**n)-1)
daily_cash_target = (float(cfg["finops"]["monthly_expenses_usd"])/30.0) + (pay/30.0) + float(cfg["finops"]["buffer_daily_usd"])
runlog = {
  "ts": time.time(),
  "daily_cash_target_usd": round(daily_cash_target, 2),
  "next_actions": [
    "Reply to 15 Briefs/invites (resume polish ES/EN, 24h delivery).",
    "Publish 1 Short at 12–14 ET with Thompson hook + UCB1 thumbnail.",
    "Post 1 Reddit/Medium job-pack with disclosure + bridge page."
  ]
}
pathlib.Path("state").mkdir(exist_ok=True)
open("state/runlog.json","w").write(json.dumps(runlog,indent=2))
open("state/metrics.json","w").write(json.dumps({"daily_cash_target_usd":runlog["daily_cash_target_usd"]},indent=2))
PY

      - name: Dashboard (writes state/README.md)
        run: |
          python3 - <<'PY'
import json, time, pathlib
from datetime import datetime, timezone
p = pathlib.Path("state"); p.mkdir(exist_ok=True)
try:
  target = json.loads(open("state/metrics.json").read()).get("daily_cash_target_usd","?")
except Exception:
  target = "?"
text = []
text.append("# AVA Dashboard\n")
text.append(f"- Last run (UTC): {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')}")
text.append("- Decision: scale yt_jobs_shorts; continue brief_flip & jobpacks")
text.append(f"- Daily cash target (est.): ${target}")
open("state/README.md","w").write("\n".join(text)+"\n")
PY

      - name: Commit state
        run: |
          git config user.name "ava-bot"
          git config user.email "bot@users.noreply.github.com"
          git add state || true
          git commit -m "AVA run" || true
          git push || true
YML

          # === Dashboard stub (gets overwritten by first run) ===
          cat > state/README.md <<'MD'
# AVA Dashboard
(First run will update this automatically.)
MD

      - name: Commit bootstrap files
        run: |
          git config user.name "ava-bot"
          git config user.email "bot@users.noreply.github.com"
          git add .
          git commit -m "Install AVA (bootstrap files)" || true
          git push || true

  # First run happens now so you see a dashboard immediately.
  first_run:
    runs-on: ubuntu-latest
    needs: install
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Ensure state dir
        run: mkdir -p state

      - name: Deliberate (Council stub)
        run: |
          python3 - << 'PY'
import json, time, pathlib
pathlib.Path("state").mkdir(exist_ok=True)
proposals = {"ts": time.time(), "proposals": [
  {"track_id":"yt_jobs_shorts","advisor_id":"gpt5_planner","recommendation":"scale"},
  {"track_id":"brief_flip","advisor_id":"deepseek_redteam","recommendation":"continue"},
  {"track_id":"medium_linkedin_jobpacks","advisor_id":"gemini_trends","recommendation":"continue"}]}
open("state/proposals.json","w").write(json.dumps(proposals,indent=2))
PY

      - name: Consensus + Decision (stub)
        run: |
          python3 - << 'PY'
import json, time
consensus = {"ts": time.time(), "ranking": [
  {"track_id":"yt_jobs_shorts","decision":"scale"},
  {"track_id":"brief_flip","decision":"continue"},
  {"track_id":"medium_linkedin_jobpacks","decision":"continue"}],
  "guardrails":{"posting_windows_et":[["12:00","14:00"],["19:00","21:00"]],
  "kill_switches":["briefs_no_inquiry_48h","reddit_no_clicks_72h","thumbnail_decay"]}}
open("state/consensus.json","w").write(json.dumps(consensus,indent=2))
PY

      - name: Operate (Planner/Distributor stubs)
        run: |
          python3 - << 'PY'
import json, time, math, pathlib
cfg = json.loads(open("ava.config.json").read())
P = float(cfg["finops"]["debt_total_usd"])
r = float(cfg["finops"]["apr_pct"])/100.0/12.0
n = max(1, int(cfg["finops"]["debt_months"]))
pay = (P/n) if r==0 else (P*r*(1+r)**n)/(((1+r)**n)-1)
daily_cash_target = (float(cfg["finops"]["monthly_expenses_usd"])/30.0) + (pay/30.0) + float(cfg["finops"]["buffer_daily_usd"])
runlog = {
  "ts": time.time(),
  "daily_cash_target_usd": round(daily_cash_target, 2),
  "next_actions": [
    "Reply to 15 Briefs/invites (resume polish ES/EN, 24h delivery).",
    "Publish 1 Short at 12–14 ET with Thompson hook + UCB1 thumbnail.",
    "Post 1 Reddit/Medium job-pack with disclosure + bridge page."
  ]
}
pathlib.Path("state").mkdir(exist_ok=True)
open("state/runlog.json","w").write(json.dumps(runlog,indent=2))
open("state/metrics.json","w").write(json.dumps({"daily_cash_target_usd":runlog["daily_cash_target_usd"]},indent=2))
PY

      - name: Dashboard (writes state/README.md)
        run: |
          python3 - <<'PY'
import json, time, pathlib
from datetime import datetime, timezone
p = pathlib.Path("state"); p.mkdir(exist_ok=True)
try:
  target = json.loads(open("state/metrics.json").read()).get("daily_cash_target_usd","?")
except Exception:
  target = "?"
text = []
text.append("# AVA Dashboard\n")
text.append(f"- Last run (UTC): {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')}")
text.append("- Decision: scale yt_jobs_shorts; continue brief_flip & jobpacks")
text.append(f"- Daily cash target (est.): ${target}")
open("state/README.md","w").write("\n".join(text)+"\n")
PY

      - name: Commit state
        run: |
          git config user.name "ava-bot"
          git config user.email "bot@users.noreply.github.com"
          git add state || true
          git commit -m "AVA first run" || true
          git push || true
